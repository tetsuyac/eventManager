// Generated by CoffeeScript 1.7.1
(function () {
  var __hasProp = {}.hasOwnProperty,
    __extends = function (child, parent) {
      for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
      }
      function ctor() {
        this.constructor = child;
      }

      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    },
    __bind = function (fn, me) {
      return function () {
        return fn.apply(me, arguments);
      };
    };
  (function () {
    var AppRouter, EditView, HeaderView, ItemView, ListView, Event, EventList, app;
    app = app || {};
    Event = (function (_super) {
      __extends(Event, _super);
      function Event() {
        return Event.__super__.constructor.apply(this, arguments);
      }

      Event.prototype.idAttribute = "_id";
      Event.prototype.defaults = {
        title:   "",
        content: ""
      };
      Event.prototype.validate = function (attributes) {
        if (attributes.title === "" || attributes.content === "") {
          return "title and content must be not empty.";
        }
      };
      return Event;
    })(Backbone.Model);
    EventList = (function (_super) {
      __extends(EventList, _super);
      function EventList() {
        return EventList.__super__.constructor.apply(this, arguments);
      }

      EventList.prototype.model = Event;
      EventList.prototype.url = "/event";
      return EventList;
    })(Backbone.Collection);
    EditView = (function (_super) {
      __extends(EditView, _super);
      function EditView() {
        this.hideView = __bind(this.hideView, this);
        this.onSave = __bind(this.onSave, this);
        return EditView.__super__.constructor.apply(this, arguments);
      }

      EditView.prototype.events = {
        "click #saveBtn":   "onSave",
        "click #cancelBtn": "hideView"
      };
      EditView.prototype.initialize = function () {
        this.$title = $("#editForm [name='title']");
        return this.$content = $("#editForm [name='content']");
      };
      EditView.prototype.render = function () {
        this.$title.val(this.model.get("title"));
        this.$content.val(this.model.get("content"));
        return this.$el.show();
      };
      EditView.prototype.onSave = function () {
        this.model.save({
          title:   this.$title.val(),
          content: this.$content.val()
        }).done((function (_this) {
          return function () {
            return _this.collection.add(_this.model, {
              merge: true
            });
          };
        })(this));
        return this.hideView();
      };
      EditView.prototype.hideView = function () {
        this.$el.hide();
        return app.router.navigate("", {
          trigger: true
        });
      };
      return EditView;
    })(Backbone.View);
    ItemView = (function (_super) {
      __extends(ItemView, _super);
      function ItemView() {
        this.onDestroy = __bind(this.onDestroy, this);
        this.onDelete = __bind(this.onDelete, this);
        this.onEdit = __bind(this.onEdit, this);
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tmpl = _.template($("#tmpl-itemview").html());
      ItemView.prototype.events = {
        "click .edit":   "onEdit",
        "click .delete": "onDelete"
      };
      ItemView.prototype.initialize = function () {
        this.listenTo(this.model, "change", this.render);
        return this.listenTo(this.model, "destroy", this.onDestroy);
      };
      ItemView.prototype.render = function () {
        this.$el.html(this.tmpl(this.model.toJSON()));
        return this;
      };
      ItemView.prototype.onEdit = function () {
        return app.router.navigate(this.model.get("_id") + "/edit", {
          trigger: true
        });
      };
      ItemView.prototype.onDelete = function () {
        return this.model.destroy();
      };
      ItemView.prototype.onDestroy = function () {
        return this.remove();
      };
      return ItemView;
    })(Backbone.View);
    ListView = (function (_super) {
      __extends(ListView, _super);
      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.initialize = function () {
        this.listenTo(this.collection, "add", this.addItemView);
        return this.collection.fetch({
          reset: true
        }).done((function (_this) {
          return function () {
            return _this.render();
          };
        })(this));
      };
      ListView.prototype.render = function () {
        return this.collection.each((function (_this) {
          return function (item) {
            return _this.addItemView(item);
          };
        })(this));
      };
      ListView.prototype.addItemView = function (item) {
        return this.$el.append(new ItemView({
          model: item
        }).render().el);
      };
      return ListView;
    })(Backbone.View);
    HeaderView = (function (_super) {
      __extends(HeaderView, _super);
      function HeaderView() {
        this.onCreate = __bind(this.onCreate, this);
        return HeaderView.__super__.constructor.apply(this, arguments);
      }

      HeaderView.prototype.events = {
        "click .create": "onCreate"
      };
      HeaderView.prototype.onCreate = function () {
        return app.router.navigate("create", {
          trigger: true
        });
      };
      return HeaderView;
    })(Backbone.View);
    AppRouter = (function (_super) {
      __extends(AppRouter, _super);
      function AppRouter() {
        this.edit = __bind(this.edit, this);
        this.add = __bind(this.add, this);
        this.home = __bind(this.home, this);
        return AppRouter.__super__.constructor.apply(this, arguments);
      }

      AppRouter.prototype.routes = {
        "":         "home",
        "create":   "add",
        ":id/edit": "edit"
      };
      AppRouter.prototype.initialize = function () {
        this.collection = new EventList;
        this.headerView = new HeaderView({
          el: $(".navbar")
        });
        this.editView = new EditView({
          el:         $("#editForm"),
          collection: this.collection
        });
        return this.listView = new ListView({
          el:         $("#eventList"),
          collection: this.collection
        });
      };
      AppRouter.prototype.home = function () {
        return this.editView.hideView();
      };
      AppRouter.prototype.add = function () {
        this.editView.model = new Event(null, {
          collection: this.collection
        });
        return this.editView.render();
      };
      AppRouter.prototype.edit = function (id) {
        this.editView.model = this.collection.get(id);
        if (this.editView.model) {
          return this.editView.render();
        }
      };
      return AppRouter;
    })(Backbone.Router);
    app.router = new AppRouter;
    Backbone.history.start();
  })();
}).call(this);
//# sourceMappingURL=app.map
